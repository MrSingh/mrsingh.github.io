<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Puneet&#39;s Notes On Data &amp; Software Engineering</title>
    <link>/</link>
    <description>Recent content on Puneet&#39;s Notes On Data &amp; Software Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 16 Feb 2021 06:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Add an Existing Project to GitHub</title>
      <link>/git/git_add_project/</link>
      <pubDate>Tue, 16 Feb 2021 06:00:00 +0000</pubDate>
      
      <guid>/git/git_add_project/</guid>
      <description>Resource
   Create a new repository for your project on GitHub.
  Open Git Bash from your local folder.
  Initialize the local directory as a Git repository.
  git init -b main Add the files in your new Git repository. This will stage all the files in your project ready for the first commit.  git add . Commit the added files.  git commit -m &amp;#34;First commit&amp;#34;  From GitHub, copy the remote repository URL.</description>
    </item>
    
    <item>
      <title>Creating Arrays with NumPy</title>
      <link>/python/creating_arrays/</link>
      <pubDate>Thu, 11 Feb 2021 06:00:00 +0000</pubDate>
      
      <guid>/python/creating_arrays/</guid>
      <description>Resources  NumPy NumPy API   # Import NumPy import numpy as np # Create a list list_1 = [1,2,3,4,5] # Create another list # we will use this later list_2 = [6,7,8,9,10] Create an Array with a List # Create a array by passing the list as an object new_array = np.array(list_1) new_array Create a multi-dimensional array or matrix # Create a list of lists list_of_lists = [list_1, list_2] list_of_lists # Create a multi-dimensional array or matrix  matrix_array = np.</description>
    </item>
    
    <item>
      <title>New Format Basics</title>
      <link>/python/format_basics/</link>
      <pubDate>Mon, 08 Feb 2021 12:00:00 +0000</pubDate>
      
      <guid>/python/format_basics/</guid>
      <description>Resource
 Basic Example # Name input name = input() &amp;#39;Hello, {}&amp;#39;.format(name) &#39;Hello, SpiderMan&#39; Dictionary Example data = {&amp;#39;first&amp;#39;: &amp;#39;Spider&amp;#39;, &amp;#39;last&amp;#39;: &amp;#39;-Man&amp;#39;} &amp;#39;{first}{last}&amp;#39;.format(**data) &#39;Spider-Man&#39; List Example data = [&amp;#39;Spider&amp;#39;, &amp;#39;Man&amp;#39;] &amp;#39;{}-{}&amp;#39;.format(*data) &#39;Spider-Man&#39; Class/Object Example class Person(object): type = &amp;#39;Enemies&amp;#39; names = [{&amp;#39;name&amp;#39;: &amp;#39;Doctor Octopus&amp;#39;}, {&amp;#39;name&amp;#39;: &amp;#39;Green Goblin&amp;#39;}] &amp;#39;{p.type}: {p.names[0][name]} and {p.names[1][name]}&amp;#39;.format(p=Person()) &#39;Enemies: Doctor Octopus and Green Goblin&#39; Datetime Example from datetime import date &amp;#39;{:%Y-%m-%d}&amp;#39;.format(date.today()) &#39;2021-02-08&#39; </description>
    </item>
    
    <item>
      <title>While Loops Basics</title>
      <link>/python/while_loop_basics/</link>
      <pubDate>Fri, 05 Feb 2021 12:44:38 +0000</pubDate>
      
      <guid>/python/while_loop_basics/</guid>
      <description>Simple While Loop # while loops until a condition is met - when x = 10 the condition is no longer met and the while loop stops # Inistalise counter i = 0 while i &amp;lt; 10: print(i) i += 1 0123456789 While Loop To Sum i = 0 sum = 0 while i &amp;lt; 10: sum = sum + i i += 1 # update counter print(&amp;#34;Inside Loop | Sum = &amp;#34;, sum) print(&amp;#34;Outside | Loop Sum = &amp;#34;, sum) Inside Loop | Sum = 0Inside Loop | Sum = 1Inside Loop | Sum = 3Inside Loop | Sum = 6Inside Loop | Sum = 10Inside Loop | Sum = 15Inside Loop | Sum = 21Inside Loop | Sum = 28Inside Loop | Sum = 36Inside Loop | Sum = 45Outside | Loop Sum = 45 While loop with condition and nested if statement # while loops until a condition is met - along with a nested if condition therefore if x is less than 10 and x is less than 5 ends the loop x = 0 while x &amp;lt; 10: if x == 5: break print(x) x += 1 01234 Infinite Loop example - Commeneted out!</description>
    </item>
    
    <item>
      <title>For Loops Basics</title>
      <link>/python/for_loop_basics/</link>
      <pubDate>Fri, 05 Feb 2021 12:00:00 +0000</pubDate>
      
      <guid>/python/for_loop_basics/</guid>
      <description>Create a List of Numbers nums = [1,2,3,4,5] Print Numbers in a List Example for num in nums: print(num) 12345 Continue Example #continue moves to the next iteration - in the example below when num == 4, &amp;#39;Found!&amp;#39; will be printed and it will skip print(num) and go to the next iteration of the loop for num in nums: if num == 4: print(&amp;#39;Found!&amp;#39;) continue print(num) 123Found!</description>
    </item>
    
    <item>
      <title>Delete Columns in a DataFrame</title>
      <link>/python/drop_dataframe_columns/</link>
      <pubDate>Thu, 04 Feb 2021 12:44:38 +0000</pubDate>
      
      <guid>/python/drop_dataframe_columns/</guid>
      <description>Resource Data Source  Import Pandas # Import Pandas import pandas as pd Set File Path and Read it into a DataFrame # Set file path fp = &amp;#34;data/cereal.csv&amp;#34; # Read file to DataFrame df = pd.read_csv(fp, delimiter=&amp;#39;,&amp;#39;) Example One # Example One # Delete All Columns Except Named Columns df_1 = df[[&amp;#39;name&amp;#39;, &amp;#39;rating&amp;#39;]] df_1 .dataframe tbody tr th:only-of-type {vertical-align: middle;}.dataframe tbody tr th {vertical-align: top;}.</description>
    </item>
    
    <item>
      <title>Write a Dataframe to a JSON File</title>
      <link>/python/write_dataframe_to_json/</link>
      <pubDate>Wed, 03 Feb 2021 00:00:00 -0700</pubDate>
      
      <guid>/python/write_dataframe_to_json/</guid>
      <description>Resource Data Source  Import Pandas # Import Pandas import pandas as pd df = pd.read_csv(&amp;#34;data/cereal.csv&amp;#34;) Output as a JSON string # output as a JSON string df.to_json() &#39;{&amp;quot;name&amp;quot;:{&amp;quot;0&amp;quot;:&amp;quot;100% Bran&amp;quot;,&amp;quot;1&amp;quot;:&amp;quot;100% Natural Bran&amp;quot;,&amp;quot;2&amp;quot;:&amp;quot;All-Bran&amp;quot;,&amp;quot;3&amp;quot;:&amp;quot;All-Bran with Extra Fiber&amp;quot;,&amp;quot;4&amp;quot;:&amp;quot;Almond Delight&amp;quot;,&amp;quot;5&amp;quot;:&amp;quot;Apple Cinnamon Cheerios&amp;quot;,&amp;quot;6&amp;quot;:&amp;quot;Apple Jacks&amp;quot;,&amp;quot;7&amp;quot;:&amp;quot;Basic 4&amp;quot;,&amp;quot;8&amp;quot;:&amp;quot;Bran Chex&amp;quot;,&amp;quot;9&amp;quot;:&amp;quot;Bran Flakes&amp;quot;,&amp;quot;10&amp;quot;:&amp;quot;Cap\&#39;n\&#39;Crunch&amp;quot;,&amp;quot;11&amp;quot;:&amp;quot;Cheerios&amp;quot;,&amp;quot;12&amp;quot;:&amp;quot;Cinnamon Toast Crunch&amp;quot;,&amp;quot;13&amp;quot;:&amp;quot;Clusters&amp;quot;,&amp;quot;14&amp;quot;:&amp;quot;Cocoa Puffs&amp;quot;,&amp;quot;15&amp;quot;:&amp;quot;Corn Chex&amp;quot;,&amp;quot;16&amp;quot;:&amp;quot;Corn Flakes&amp;quot;,&amp;quot;17&amp;quot;:&amp;quot;Corn Pops&amp;quot;,&amp;quot;18&amp;quot;:&amp;quot;Count Chocula&amp;quot;,&amp;quot;19&amp;quot;:&amp;quot;Cracklin\&#39; Oat Bran&amp;quot;,&amp;quot;20&amp;quot;:&amp;quot;Cream of Wheat (Quick)&amp;quot;,&amp;quot;21&amp;quot;:&amp;quot;Crispix&amp;quot;,&amp;quot;22&amp;quot;:&amp;quot;Crispy Wheat &amp;amp; Raisins&amp;quot;,&amp;quot;23&amp;quot;:&amp;quot;Double Chex&amp;quot;,&amp;quot;24&amp;quot;:&amp;quot;Froot Loops&amp;quot;,&amp;quot;25&amp;quot;:&amp;quot;Frosted Flakes&amp;quot;,&amp;quot;26&amp;quot;:&amp;quot;Frosted Mini-Wheats&amp;quot;,&amp;quot;27&amp;quot;:&amp;quot;Fruit &amp;amp; Fibre Dates; Walnuts; and Oats&amp;quot;,&amp;quot;28&amp;quot;:&amp;quot;Fruitful Bran&amp;quot;,&amp;quot;29&amp;quot;:&amp;quot;Fruity Pebbles&amp;quot;,&amp;quot;30&amp;quot;:&amp;quot;Golden Crisp&amp;quot;,&amp;quot;31&amp;quot;:&amp;quot;Golden Grahams&amp;quot;,&amp;quot;32&amp;quot;:&amp;quot;Grape Nuts Flakes&amp;quot;,&amp;quot;33&amp;quot;:&amp;quot;Grape-Nuts&amp;quot;,&amp;quot;34&amp;quot;:&amp;quot;Great Grains Pecan&amp;quot;,&amp;quot;35&amp;quot;:&amp;quot;Honey Graham Ohs&amp;quot;,&amp;quot;36&amp;quot;:&amp;quot;Honey Nut Cheerios&amp;quot;,&amp;quot;37&amp;quot;:&amp;quot;Honey-comb&amp;quot;,&amp;quot;38&amp;quot;:&amp;quot;Just Right Crunchy Nuggets&amp;quot;,&amp;quot;39&amp;quot;:&amp;quot;Just Right Fruit &amp;amp; Nut&amp;quot;,&amp;quot;40&amp;quot;:&amp;quot;Kix&amp;quot;,&amp;quot;41&amp;quot;:&amp;quot;Life&amp;quot;,&amp;quot;42&amp;quot;:&amp;quot;Lucky Charms&amp;quot;,&amp;quot;43&amp;quot;:&amp;quot;Maypo&amp;quot;,&amp;quot;44&amp;quot;:&amp;quot;Muesli Raisins; Dates; &amp;amp; Almonds&amp;quot;,&amp;quot;45&amp;quot;:&amp;quot;Muesli Raisins; Peaches; &amp;amp; Pecans&amp;quot;,&amp;quot;46&amp;quot;:&amp;quot;Mueslix Crispy Blend&amp;quot;,&amp;quot;47&amp;quot;:&amp;quot;Multi-Grain Cheerios&amp;quot;,&amp;quot;48&amp;quot;:&amp;quot;Nut&amp;amp;Honey Crunch&amp;quot;,&amp;quot;49&amp;quot;:&amp;quot;Nutri-Grain Almond-Raisin&amp;quot;,&amp;quot;50&amp;quot;:&amp;quot;Nutri-grain Wheat&amp;quot;,&amp;quot;51&amp;quot;:&amp;quot;Oatmeal Raisin Crisp&amp;quot;,&amp;quot;52&amp;quot;:&amp;quot;Post Nat.</description>
    </item>
    
    <item>
      <title>Basic Analyse of Original Estimate vs Time Spent from Jira data</title>
      <link>/test/data_analysis/</link>
      <pubDate>Tue, 02 Feb 2021 19:44:38 +0000</pubDate>
      
      <guid>/test/data_analysis/</guid>
      <description>import matplotlib.pyplot as plt import pandas as pd filePath = &amp;#34;data/cereal.csv&amp;#34; # read file data=pd.read_csv(filePath, parse_dates=True, delimiter=&amp;#39;,&amp;#39;, encoding = &amp;#39;iso-8859-1&amp;#39;) # Sprint 17.1.3 # # Review and give more meaningful variable names # # Time in dates is in seconds, dividing by 3600 gives us the hour or partial hour groupby_comparison = data.groupby(&amp;#39;sodium&amp;#39;).mean[&amp;#39;sugars&amp;#39;] #Data for original time vs spent time  # #IssueType.loc[&amp;#39;Total&amp;#39;]= IssueType.sum() #add Row with column - totals # IssueType[&amp;#39;Time Spent&amp;#39;]=IssueType[&amp;#39;Time Spent&amp;#39;].</description>
    </item>
    
    <item>
      <title>Basic Analyse of Original Estimate vs Time Spent from Jira data</title>
      <link>/test/jira_data_analysis/</link>
      <pubDate>Tue, 02 Feb 2021 19:44:38 +0000</pubDate>
      
      <guid>/test/jira_data_analysis/</guid>
      <description>import matplotlib.pyplot as plt import pandas as pd #set file path # TODO - Create new file without all other columns filePath = &amp;#34;data/j17_1r.csv&amp;#34; # read file data=pd.read_csv(filePath, parse_dates=True, index_col=&amp;#39;Status&amp;#39;, delimiter=&amp;#39;,&amp;#39;, encoding = &amp;#39;iso-8859-1&amp;#39;) # Sprint 17.1.3 # Review and give more meaningful variable names # Time in dates is in seconds, dividing by 3600 gives us the hour or partial hour IssueType = data.groupby(&amp;#39;Issue Type&amp;#39;)[&amp;#39;Original Estimate&amp;#39;,&amp;#39;Time Spent&amp;#39;].sum()/3600 #Data for original time vs spent time  #IssueType.</description>
    </item>
    
    <item>
      <title>Requests and Beautiful Soup</title>
      <link>/python/ws_requests_and_beautifulsoup/</link>
      <pubDate>Fri, 29 Jan 2021 14:50:18 +0000</pubDate>
      
      <guid>/python/ws_requests_and_beautifulsoup/</guid>
      <description>Import Modules import requests from bs4 import BeautifulSoup # Example adapted from the links below # https://requests.readthedocs.io/en/master/ # https://www.crummy.com/software/BeautifulSoup/bs4/doc/ Request a Web Page html_page = requests.get(&amp;#39;https://www.crummy.com/software/BeautifulSoup/bs4/doc/&amp;#39;, auth=(&amp;#39;user&amp;#39;, &amp;#39;pass&amp;#39;)) Return Page Headers # Return Page Headers html_page.headers[&amp;#39;content-type&amp;#39;] &#39;text/html; charset=UTF-8&#39; Return Page Status Code # Return Page Status Code html_page.status_code 200 Create a Beautiful Soup Object with HTML text # Create a Beautiful Soup Object with HTML text soup = BeautifulSoup(html_page.</description>
    </item>
    
    <item>
      <title>Python os.walk()</title>
      <link>/python/oswalk/</link>
      <pubDate>Thu, 28 Jan 2021 14:50:18 +0000</pubDate>
      
      <guid>/python/oswalk/</guid>
      <description> Import Modules # Import Module import os Set Path # Set Path path = &amp;#39;../../content/&amp;#39; Find All Markdown Files In All Content Folders # Find all markdown filesin all content folders all_md_files = [os.path.join(root, name) for root, dirs, files in os.walk(path) for name in files if name.endswith((&amp;#34;.md&amp;#34;))] all_md_files [&#39;../../content/archive\\get-started-with-angular-2.md&#39;,&#39;../../content/content\\about\\about.md&#39;,&#39;../../content/git\\basic_git_commands.md&#39;,&#39;../../content/powershell\\PowerShell.md&#39;,&#39;../../content/python\\drop_dataframe_columns.md&#39;,&#39;../../content/python\\load_csv.md&#39;,&#39;../../content/python\\load_json.md&#39;,&#39;../../content/python\\ossystem.md&#39;,&#39;../../content/python\\oswalk.md&#39;,&#39;../../content/python\\resources.md&#39;,&#39;../../content/python\\write_dataframe_to_json.md&#39;,&#39;../../content/python\\ws_requests_and_beautifulsoup.md&#39;,&#39;../../content/test\\data_analysis.md&#39;,&#39;../../content/test\\jira_data_analysis.md&#39;,&#39;../../content/test\\reddit_wallstreetbets.md&#39;,&#39;../../content/vscode\\inserting_date_time.md&#39;,&#39;../../content/vscode\\vscode_python_issues.md&#39;,&#39;../../content/vscode\\vscode_shortcuts.md&#39;] </description>
    </item>
    
    <item>
      <title>Insert Date Time String in Visual Studio Code</title>
      <link>/vscode/inserting_date_time/</link>
      <pubDate>Mon, 25 Jan 2021 19:44:38 +0000</pubDate>
      
      <guid>/vscode/inserting_date_time/</guid>
      <description>Install &amp;lsquo;Insert Date String&amp;rsquo; Extension Extension
Click on Install from above link or use the steps below.
 Open Command Palette: Ctrl + Shift + P Find: Install Extensions Search: Insert Date String Install Use Ctrl + Shift + I to insert the date time to the cursor location.  Check documentation for more options.</description>
    </item>
    
    <item>
      <title>Visual Studio Code | Shortcuts</title>
      <link>/vscode/vscode_shortcuts/</link>
      <pubDate>Mon, 25 Jan 2021 19:44:38 +0000</pubDate>
      
      <guid>/vscode/vscode_shortcuts/</guid>
      <description>Toggle Integrated Terminal Ctrl + &#39; Toggle Side Bar Ctrl + B Open Settings Ctrl + , Quick Open File Ctrl + p Open Preview Mode ToDO Move File to Split Editor Ctrl + \ Find and Replace Find Ctrl + f Find Selection Ctrl + h Find &amp;amp; Replace Selection Execute Ctrl + Enter Find &amp;amp; Replace All Execute Ctrl + Alt + Enter Command Palette Ctrl + Shift + P Toggle Comment Ctrl + / Copy Line - selects the line the cursur is on Ctrl + C Duplicate Line // AboveCtrl + Alt + Up// BelowCtrl + Alt + Down Multiple Cursors Ctrl + Click// OrCtrl + Shift + Alt + Up/Down Select Word Ctrl + D Select All Words ToDo Function to Rename f2 Go to Function Definition Ctrl + Click Zen Mode Toggle Ctrl + K// ThenZ </description>
    </item>
    
    <item>
      <title>Load a JSON file</title>
      <link>/python/load_json/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 -0800</pubDate>
      
      <guid>/python/load_json/</guid>
      <description>import pandas as pd # Set JSON filepath json_filepath = &amp;#34;data/new_json.json&amp;#34; # Read JSON File df = pd.read_json(json_filepath, orient=&amp;#39;split&amp;#39;) df .dataframe tbody tr th:only-of-type {vertical-align: middle;}.dataframe tbody tr th {vertical-align: top;}.dataframe thead th {text-align: right;} 
namemfrtypecaloriesproteinfatsodiumfibercarbosugarspotassvitaminsshelfweightcupsrating0100% BranNC704113010.</description>
    </item>
    
    <item>
      <title>Load a CSV File</title>
      <link>/python/load_csv/</link>
      <pubDate>Mon, 07 Dec 2020 00:00:00 -0700</pubDate>
      
      <guid>/python/load_csv/</guid>
      <description>Data Source  Import Pandas # Import Pandas import pandas as pd Read CSV file #Load CSV file into a dataframe with Pandas df = pd.read_csv(&amp;#39;data/cereal.csv&amp;#39;) #Output Dataframe df .dataframe tbody tr th:only-of-type {vertical-align: middle;}.dataframe tbody tr th {vertical-align: top;}.dataframe thead th {text-align: right;} 
namemfrtypecaloriesproteinfatsodiumfibercarbosugarspotassvitaminsshelfweightcupsrating0100% BranNC704113010.</description>
    </item>
    
    <item>
      <title>Basic Git Commands</title>
      <link>/git/basic_git_commands/</link>
      <pubDate>Sun, 01 Nov 2020 10:05:19 +0000</pubDate>
      
      <guid>/git/basic_git_commands/</guid>
      <description> Add remote repository git remote add origin https://github.com/user/repo.git Check Remote Repository git remote -v Change Current Branch Name git branch -m &amp;lt;newname&amp;gt; Change Any Branch Name git branch -m &amp;lt;old-name&amp;gt; &amp;lt;new-name&amp;gt; Clone/Download git clone https://github.com/username/projectName.git Create a new branch git checkout -b new-branch Stage All Changes git stage -all Add Files git add . Commit git commit -a -m &amp;#34;Commit Comment&amp;#34; Push git push origin gh-pages </description>
    </item>
    
    <item>
      <title></title>
      <link>/archive/get-started-with-angular-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archive/get-started-with-angular-2/</guid>
      <description>Get started with Angular 2 in 5 minutes This is quick guide to help you get started with Angular 2.
Assumptions  Node, npm and Visual Studio Code are all already installed.  Get started From Visual Studio Code start up the Integrated Terminal via View &amp;gt; Integrated Terminal.
Then install Angular CLI with the following command:
npm i -g angular-cliNow you have Angular CLI installed lets create a sample app.</description>
    </item>
    
    <item>
      <title></title>
      <link>/powershell/powershell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/powershell/powershell/</guid>
      <description>Intro to Powershell Things to know Execution Policy By default Powershell is secure a philosophy that means that doublecliking a Powershell script in Windows Explorer won&amp;rsquo;t execute the script.
Powershell has four execution policies - these govern how a script is executed.
 Restricted AllSigned RemoteSigned Unrestricted  Get-ExecutionPolicy Set-ExecutionPolicy Restricted Set-ExecutionPolicy Unrestricted Set-ExecutionPolicy RemoteSigned </description>
    </item>
    
    <item>
      <title></title>
      <link>/python/untitled/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/untitled/</guid>
      <description>## Arrays and Scalars </description>
    </item>
    
    <item>
      <title></title>
      <link>/test/reddit_wallstreetbets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test/reddit_wallstreetbets/</guid>
      <description># Import Pandas import pandas as pd #Import Requests and BeautifulSoup import requests from bs4 import BeautifulSoup from googlesearch import search # NOTES # https://stackoverflow.com/questions/4785244/search-a-text-file-and-print-related-lines-in-python #TODO - Prettify and then save file and then use above example # User Header user_header = {&amp;#39;User-Agent&amp;#39;: &amp;#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36&amp;#39;} #r = requests.get(&amp;#39;https://www.reddit.com/r/wallstreetbets/&amp;#39;, headers=user_header) r = requests.get(&amp;#39;https://www.reddit.com/r/wallstreetbets/comments/l9kn3z/drew_this_for_you_my_fellow_retards/&amp;#39;, headers=user_header) soup = BeautifulSoup(r.text, &amp;#39;html.parser&amp;#39;) soup.get_text() &amp;quot;\n\n\n\n\n\n\n\n\n\n\n\n\n\nDrew this for you my fellow retards 💎🙌🏼 : wallstreetbets\n\n\n\n\nPress J to jump to the feed.</description>
    </item>
    
    <item>
      <title></title>
      <link>/vscode/vscode_python_issues/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/vscode/vscode_python_issues/</guid>
      <description>Python Issues in VSCode Jupyter notebook fails to export to python script Error 2020-12-16 16:06:17: Jupyter Kernel Spec not found for a local connectionFix pip install nbconvert </description>
    </item>
    
  </channel>
</rss>
